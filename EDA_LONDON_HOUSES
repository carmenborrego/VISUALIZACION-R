#práctica con el conjunto de datos Houses in London de Kaggle
library(readxl)
london_houses <- read_excel("RUTA.xlsx")


vecindario <- table(london_houses$Neighborhood)
class(vecindario)
print(vecindario)
barplot.default(vecindario)
library(ggplot2)
qplot(london_houses$Neighborhood, geom = "bar", 
      ylab = "Número de propiedades",
      xlab = "Vecindario", main ="Propiedades por vecindario", 
      fill = I("lightslategrey")) + 
  theme_classic()

recamaras <- table(london_houses$Bedrooms)
print(recamaras)
qplot(london_houses$Bedrooms, geom = "bar", 
      ylab = "Número de propiedades",
      xlab = "Número de recámaras", main ="Propiedades por número de recámaras") + 
  theme_classic()

summary(london_houses$Price)

library(tidyplots)
london_houses %>% 
  tidyplot(x = Price) %>%
  remove_y_axis_labels() %>%
  adjust_x_axis_title(title = "Precio") %>%
  adjust_size(width = 100, height = 80) %>%
  adjust_font(fontsize = 12, face = "bold") %>%
  adjust_title(title = "Precio en miles de libras") %>%
  add_boxplot(box_width = 0.3, outlier.size = 1.3)

london_houses %>% 
  tidyplot(x = Neighborhood, y = Price, color = Neighborhood) %>%
  adjust_size(width = 100, height = 80) %>%
  adjust_font(fontsize = 12, face = "bold") %>%
  adjust_title(title = "Precio en miles de libras") %>%
  add_violin(draw_quantiles = 0.5) %>% 
  adjust_x_axis_title(title = "Vecindario")%>%
  adjust_y_axis_title(title = "Price") %>%
  adjust_x_axis(rotate =TRUE) 


library(ggpubr)
ggscatter(london_houses, x = "Square Meters", y = "Price", 
          add = "reg.line", conf.int = TRUE, 
          cor.coef = TRUE, cor.method = "pearson",
          xlab = "Metros cuadrados", ylab = "Precio (en miles de libras)", 
          title = "Correlación precio/metros cuadrados")

london_houses <- read_excel("RUTA.xlsx", 
                            col_types = c("text", "text", "text", 
                                          "text", "numeric", "numeric", "text", 
                                          "text", "text", "text", "text", "text", 
                                          "text", "text", "text", "text", "numeric"))

library(ggcorrplot)
correlacion <- dplyr::select_if(london_houses, is.numeric)
r <- cor(correlacion, use="complete.obs")
redondeada<-round(r,2)
ggcorrplot(r, 
           hc.order = TRUE, title = "Correlación", 
           colors = c("#e0a", "#e5e1ef", "#75add0"),
           lab = TRUE)



#creamos el modelo de regresión lineal simple 
#con el precio como variable explicada 
#y el número de metros cuadrados como variable explicativa
#la función a utilizar es lm y la primera variable es la dependiente, 
#la siguiente o siguientes variables son las explicativas
regresion <- lm(Price ~ SQM, data =london_houses)
summary(regresion)
library(easystats)
report(regresion)
model_parameters(regresion)
model_performance(regresion)



#revision de supuestos
#normalidad
library(car)
qqPlot(regresion, main = "Q-Q Plot para los residuales", 
            id = FALSE, grid = FALSE, 
            ylab = "Residuales estandarizados")
check_normality(regresion)
plot(regresion$residuals)
shapiro.test(regresion$residuals)


qqplot(resultados$Price, resultados$.resid, 
       main = "QQ plot para residuales", 
       col= "cornflowerblue", 
       ylab = "Price", 
       xlab = "Residuals", bty = "L")


#homoscedasticidad
hetero <- check_heteroscedasticity(regresion)
ncvTest(regresion)



#se elabora diagrama de dispersión 
#que incluye la recta de mejor ajuste 
resultados <- fortify(regresion)
ggplot(resultados) + 
  geom_point(aes(x = SQM, y = Price, color = london_houses$Neighborhood)) +
  geom_line(aes(x = SQM, y = .fitted, color = london_houses$Neighborhood)) + 
  labs(title = "Diarama de dispersión para el modelo de regresión", 
       color = "Neighborhood") + 
  scale_color_material() +
  theme_classic()
print(resultados)

library(car)
durbinWatsonTest(regresion)

